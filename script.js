// === –ù–∞–≤–∏–≥–∞—Ü–∏—è ===
const navItems = document.querySelectorAll('nav li');
navItems.forEach(li => {
  li.addEventListener('click', () => {
    navItems.forEach(x => x.classList.remove('active'));
    li.classList.add('active');
    const gameId = li.dataset.game;
    document.querySelectorAll('.game').forEach(g => {
      g.classList.toggle('active', g.id === gameId);
    });
  });
});

// === Tic-Tac-Toe ===
const cells = document.querySelectorAll('#tic .cell');
const resetTic = document.querySelector('.reset-tic');
const winPat = [
  [0,1,2],[3,4,5],[6,7,8],
  [0,3,6],[1,4,7],[2,5,8],
  [0,4,8],[2,4,6]
];
let board, turn;
function initTic() {
  board = Array(9).fill('');
  turn = 'X';
  cells.forEach(c => {
    c.textContent = '';
    c.onclick = ticClick;
  });
}
function ticClick() {
  const i = this.dataset.i;
  if (board[i]) return;
  board[i] = turn;
  this.textContent = turn;
  if (winPat.some(p => p.every(i => board[i] === turn))) {
    alert(turn + ' –ø–æ–±–µ–¥–∏–ª!');
    endTic();
  } else if (!board.includes('')) {
    alert('–ù–∏—á—å—è');
    endTic();
  } else {
    turn = turn === 'X' ? 'O' : 'X';
  }
}
function endTic() {
  cells.forEach(c => c.onclick = null);
}
resetTic.addEventListener('click', initTic);
initTic();

// === Rock-Paper-Scissors ===
const rpsBtns = document.querySelectorAll('#rps .rps-buttons button');
const rpsRes  = document.querySelector('.rps-result');
const resetR  = document.querySelector('.reset-rps');
rpsBtns.forEach(b => {
  b.addEventListener('click', () => {
    const you = b.dataset.choice;
    const opts = ['‚úä','‚úã','‚úåÔ∏è'];
    const comp = opts[Math.floor(Math.random()*3)];
    let res = you === comp ? '–ù–∏—á—å—è' :
      (you==='‚úä'&&comp==='‚úåÔ∏è' || you==='‚úã'&&comp==='‚úä' || you==='‚úåÔ∏è'&&comp==='‚úã')
        ? '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!' : '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏';
    rpsRes.textContent = `–í—ã: ${you} ‚Ä¢ –ö–æ–º–ø: ${comp} ‚Üí ${res}`;
    rpsBtns.forEach(x => x.disabled = true);
  });
});
resetR.addEventListener('click', () => {
  rpsRes.textContent = '';
  rpsBtns.forEach(x => x.disabled = false);
});

// === Reaction Test ===
const box    = document.querySelector('.box');
const btnR   = document.querySelector('.start-react');
const rRes   = document.querySelector('.react-result');
let tStart, tId;
btnR.addEventListener('click', () => {
  box.textContent = '–ñ–¥–∏—Ç–µ...';
  box.classList.add('wait');
  btnR.disabled = true;
  rRes.textContent = '';
  tId = setTimeout(() => {
    box.textContent = '–ö–ª–∏–∫!';
    box.classList.remove('wait');
    box.classList.add('go');
    tStart = Date.now();
    box.onclick = record;
  }, Math.random()*2000 + 500);
});
function record() {
  const dt = Date.now() - tStart;
  rRes.textContent = `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${dt} –º—Å`;
  box.classList.remove('go');
  box.textContent = '–ù–∞–∂–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª';
  btnR.disabled = false;
  box.onclick = null;
  clearTimeout(tId);
}

// === Number Guessing ===
const guessBtn   = document.querySelector('.guess-btn');
const guessInput = document.querySelector('.guess-input');
const guessRes   = document.querySelector('.guess-result');
const resetGuess = document.querySelector('.reset-guess');
let secret;
function initGuess() {
  secret = Math.floor(Math.random()*100) + 1;
  guessRes.textContent = '';
  guessInput.value = '';
  guessBtn.disabled = false;
}
guessBtn.addEventListener('click', () => {
  const val = +guessInput.value;
  if (!val || val<1 || val>100) {
    guessRes.textContent = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100';
  } else if (val < secret) {
    guessRes.textContent = '–ë–æ–ª—å—à–µ ‚Üë';
  } else if (val > secret) {
    guessRes.textContent = '–ú–µ–Ω—å—à–µ ‚Üì';
  } else {
    guessRes.textContent = '–£–≥–∞–¥–∞–ª–∏! üéâ';
    guessBtn.disabled = true;
  }
});
resetGuess.addEventListener('click', initGuess);
initGuess();

// === Click Counter ===
const startClick = document.querySelector('.start-clicker');
const clickBtn   = document.querySelector('.click-btn');
const clickCnt   = document.querySelector('.click-count');
let count, clkT;
startClick.addEventListener('click', () => {
  count = 0;
  clickCnt.textContent = '0';
  clickBtn.disabled = false;
  startClick.disabled = true;
  clkT = setTimeout(() => {
    clickBtn.disabled = true;
    startClick.disabled = false;
    alert(`–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: ${count}`);
  }, 5000);
});
clickBtn.addEventListener('click', () => {
  count++;
  clickCnt.textContent = count;
});

// === Coin Flip ===
const flipBtn = document.querySelector('.flip-coin');
const coinRes = document.querySelector('.coin-result');
flipBtn.addEventListener('click', () => {
  const result = Math.random() < 0.5 ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞';
  coinRes.textContent = `–í—ã–ø–∞–ª–æ: ${result}`;
});

// === Dice Roller ===
const rollBtn = document.querySelector('.roll-dice');
const diceRes = document.querySelector('.dice-result');
rollBtn.addEventListener('click', () => {
  const value = Math.floor(Math.random()*6) + 1;
  diceRes.textContent = `–í—ã–ø–∞–ª–æ: ${value}`;
});

// === Random Trivia ===
const facts = [
  '–ú—ë–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è.',
  '–£ –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.',
  '–ë–∞–Ω–∞–Ω—ã ‚Äî —è–≥–æ–¥—ã, –∞ –∫–ª—É–±–Ω–∏–∫–∞ ‚Äî –Ω–µ—Ç.',
  '–í –Ω–∞—à–µ–π –í—Å–µ–ª–µ–Ω–Ω–æ–π –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥, —á–µ–º –ø–µ—Å—á–∏–Ω–æ–∫ –Ω–∞ –ó–µ–º–ª–µ.',
  '–û–¥–∏–Ω –¥–µ–Ω—å –Ω–∞ –í–µ–Ω–µ—Ä–µ –¥–ª–∏–Ω–Ω–µ–µ –≥–æ–¥–∞ –Ω–∞ –í–µ–Ω–µ—Ä–µ.'
];
const triviaBtn  = document.querySelector('.next-trivia');
const triviaText = document.querySelector('.trivia-text');
triviaBtn.addEventListener('click', () => {
  const idx = Math.floor(Math.random()*facts.length);
  triviaText.textContent = facts[idx];
});
